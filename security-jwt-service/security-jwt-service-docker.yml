# Internal caches used by the microservice
cache:
  jwtConfiguration:
    entryCapacity: 2
    expireInSeconds: 3600
    name: jwtConfigurationCache


# Service registration and discovery
eureka:
  client:
    # Pull down a local copy of the registry
    fetchRegistry: true
    healthcheck:
      enabled: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://registry-server:8761/eureka/}
  instance:
    # Indicates the duration the server waits since it received the last heartbeat before it can evict an instance
    # from its registry. This value should be greater than leaseRenewalIntervalInSeconds
    leaseExpirationDurationInSeconds: 75
    # Indicates the interval of heartbeats that the client sends to the server. The default value is 30 seconds
    # which means that the client will send one heartbeat every 30 seconds.
    leaseRenewalIntervalInSeconds: 60
    # Register the IP of the service rather than the server name (useful when there is no a server-based
    # environment where a service is assigned a DNS-backed host name, usually in Docker for example)
    preferIpAddress: true


# Required to expose the routes included actuator: actuator/routes
management:
  endpoints:
    web:
      exposure:
        include: health, info


# Security configuration
security:
  jwe:
    # Raw encryptionSecret: 841d8A6C80C#A4FcAf32D5367t1!C53b
    encryptionSecret: "{cipher}bf7c79f1a7cbd56cb1f10ccc0c8e6440ba552315e86789253ede14e62a4f007ea680136668b4b95ace78506e9c247bcf20b2a88da4baf5c111e6396e67c69236"


# Spring framework configuration
spring:
  datasource:
    url: ${DABATASE_URL:jdbc:postgresql://host.docker.internal:5432/microservice}
    username: microservice
    # Using environment variable ENCRYPT_KEY=ENCRYPT_KEY
    # Getting the value with POST localhost:8888/encrypt and the password in its body
    # Raw password: microservice
    password: "{cipher}f0c0759246b4a96350c570136adbe3ac9ff4e89c5a0bc37a553a4d7b4ded1b62"
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL10Dialect
        jdbc:
          lob:
            # With Java >= 9, to avoid:
            # SQLFeatureNotSupportedException: Method PgConnection.createClob() is not yet implemented
            non_contextual_creation: true
  # To include trace and span identifiers in every log
  sleuth:
    reactor:
      instrumentation-type: decorate_on_each