# Service registration and discovery
eureka:
  client:
    # Pull down a local copy of the registry
    fetchRegistry: true
    healthcheck:
      enabled: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://registry-server:8761/eureka/}
  instance:
    # Indicates the duration the server waits since it received the last heartbeat before it can evict an instance
    # from its registry. This value should be greater than leaseRenewalIntervalInSeconds
    leaseExpirationDurationInSeconds: 75
    # Indicates the interval of heartbeats that the client sends to the server. The default value is 30 seconds
    # which means that the client will send one heartbeat every 30 seconds.
    leaseRenewalIntervalInSeconds: 60
    # Register the IP of the service rather than the server name (useful when there is no a server-based
    # environment where a service is assigned a DNS-backed host name, usually in Docker for example)
    preferIpAddress: true


# gRPC client and server configuration
grpc:
  client:
    # Time in seconds waiting for the client to become terminated, giving up if the timeout is reached.
    # 0 means no value
    awaitTerminationInSeconds: 30
    # Time in seconds waiting for a response from the server after invoking any method on client side, giving up if the timeout is reached.
    # 0 means no value
    withDeadlineAfterInSeconds: 30
  server:
    host: ${GRPC_SERVER_HOST:pizza-service}
    port: ${GRPC_SERVER_PORT:8070}


# Required to expose the routes included actuator: actuator/routes
management:
  endpoints:
    web:
      exposure:
        include: health, info


# Configuration of external Rest requests using Feign client
feign:
  client:
    config:
      securityServer:
        connectTimeout: 5000
        loggerLevel: basic
        readTimeout: 30000


# Configuration used to connect to the security microservice
security:
  restApi:
    authenticationInformation: ${SECURITY_SERVER:http://gateway-server:5555/security/oauth}
    clientId: Spring5Microservices
    # Raw password: Spring5Microservices
    clientPassword: "{cipher}9f746b78f2d521d96cacf9fa65913048ef971dc242030ca5d8c7a56ddf90093cb58dfe71b66255df8ffe1d543680fe88"


# Spring framework configuration
spring:
  datasource:
    driverClassName: org.postgresql.Driver
    url: ${DABATASE_URL:jdbc:postgresql://host.docker.internal:5432/microservice}
    username: microservice
    # Using environment variable ENCRYPT_KEY=ENCRYPT_KEY
    # Getting the value with POST localhost:8888/encrypt and the password in its body
    # Raw password: microservice
    password: "{cipher}f0c0759246b4a96350c570136adbe3ac9ff4e89c5a0bc37a553a4d7b4ded1b62"
  jooq:
    sql-dialect: POSTGRES
  # To include trace and span identifiers in every log
  sleuth:
    reactor:
      instrumentation-type: decorate_on_each